name: Tested Up To
# Run cron every week
on:
  schedule:
    - cron: '0 3 * * 0' # Run at 9:00 AM BD time on Sunday
  workflow_dispatch:
    inputs:
      ref:
        description: 'The branch to run the release on (default: master)'
        required: false
        default: 'master'

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test_wp_version:
    name: Check WordPress version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get tested wp version
        id: tested_wp
        run: |
          version=$(grep "^Tested up to:" readme.txt | awk -F' ' '{print $NF}')
          echo "::set-output name=version::$version"
          echo "Tested up to version: $version"

      - name: Get latest WordPress version
        id: latest_wp
        run: |
          version=$(curl -s http://api.wordpress.org/core/version-check/1.7/ | sed -e 's/.*"current":"\([^"]*\)".*/\1/')
          echo "::set-output name=version::$version"
          echo "Latest WordPress version: $version"

      - name: Open a PR to update tested up to version
        if: steps.tested_wp.outputs.version && steps.latest_wp.outputs.version && steps.tested_wp.outputs.version != steps.latest_wp.outputs.version
        run: |
          # If the latest WordPress version or the Latest WooCommerce version are not as the tested up to version, then open a PR chaning the tested up to versions.
          git config --global user.email "manikdrmc@gmail.com"
          git config --global user.name "Sultan Nasir Uddin"
          git checkout master
          git pull origin master
          git checkout -b update-tested-up-to-wp-${{ steps.latest_wp.outputs.version }}
          # Find php files and check if the file contains version number, then find the version number
          FILES=$(find . -name '*.php' -exec grep -l "Tested up to: $PLUGIN_VERSION" {} \;)
          # Push readme.txt to the array
          FILES+=("readme.txt")
          # Loop through the files and update the version number
          for FILE in "${FILES[@]}"; do
            sed -i "s/Tested up to: .*/Tested up to: ${{ steps.latest_wp.outputs.version }}/" $FILE
          done
          git add .
          git commit -m "Update tested up to version to ${{ steps.latest_wp.outputs.version }}"
          git push origin update-tested-up-to-wp-${{ steps.latest_wp.outputs.version }}
          curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls -d '{"title": "Update tested up to WordPress version to ${{ steps.latest_wp.outputs.version }}", "head": "update-tested-up-to-wp-${{ steps.latest_wp.outputs.version }}", "base": "master"}'

  test_wc_version:
    name: Check WooCommerce version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Get tested wc version
        id: tested_wc
        run: |
          FILES=$(find . -name '*.php' -exec grep -l "WC tested up to:" {} \;)
          # Loop through the files and find the version number if found then break the loop
          for FILE in $FILES; do
            version=$(grep -o "WC tested up to: [0-9.]*" $FILE | grep -o "[0-9.]*")
            if [[ $version ]]; then
              echo "::set-output name=version::$version"
              break
            fi
          done
          # If the version is found echo the version, else echo the version as 0
          if [[ $version ]]; then
              echo "Tested up to WooCommerce version: $version"
          fi

      - name: Get latest WooCommerce version
        if: steps.tested_wc.outputs.version
        id: latest_wc
        run: |
          version=$(curl -s https://api.wordpress.org/plugins/info/1.0/woocommerce.json | sed -e 's/.*"version":"\([^"]*\)".*/\1/')
          echo "::set-output name=version::$version"
          echo "Latest WooCommerce version: $version"

      - name: Open a PR to update tested up to version
        if: steps.tested_wc.outputs.version && steps.latest_wc.outputs.version && steps.tested_wc.outputs.version != steps.latest_wc.outputs.version
        run: |
          # If the latest WordPress version or the Latest WooCommerce version are not as the tested up to version, then open a PR chaning the tested up to versions.
          git config --global user.email "manikdrmc@gmail.com"
          git config --global user.name "Sultan Nasir Uddin"
          git checkout master
          git pull origin master
          git checkout -b update-tested-up-to-wc-${{ steps.latest_wc.outputs.version }}
          # Find php files and check if the file contains version number, then find the version number
          FILES=$(find . -name '*.php' -exec grep -l "WC tested up to: $PLUGIN_VERSION" {} \;)
          # Push readme.txt to the array
          FILES+=("readme.txt")
          # Loop through the files and update the version number
          for FILE in "${FILES[@]}"; do
            sed -i "s/WC tested up to: .*/WC tested up to: ${{ steps.latest_wc.outputs.version }}/" $FILE
          done
          git add .
          git commit -m "Update tested up to version to ${{ steps.latest_wc.outputs.version }}"
          git push origin update-tested-up-to-wc-${{ steps.latest_wc.outputs.version }}
          curl -X POST -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/pulls -d '{"title": "Update tested up to WooCommerce version to ${{ steps.latest_wc.outputs.version }}", "head": "update-tested-up-to-wc-${{ steps.latest_wc.outputs.version }}", "base": "master"}'
