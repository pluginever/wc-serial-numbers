<?php

namespace WooCommerceSerialNumbers\Admin;

use WooCommerceSerialNumbers\Models\Key;

defined( 'ABSPATH' ) || exit;

/**
 * Class Products.
 *
 * @since   1.0.0
 * @package WooCommerceSerialNumbers\Admin
 */
class Products extends \WooCommerceSerialNumbers\Lib\Singleton {

	/**
	 * Products constructor.
	 *
	 * @since 1.0.0
	 */
	protected function __construct() {
		add_filter( 'woocommerce_product_data_tabs', array( __CLASS__, 'product_data_tab' ) );
		add_action( 'woocommerce_product_data_panels', array( __CLASS__, 'product_data_panel' ) );
		//add_filter( 'display_post_states', array( __CLASS__, 'post_states' ), 10, 2 );

		//add_action( 'admin_head', array( __CLASS__, 'print_style' ) );
	}

	/**
	 * Add product data tab for serial numbers.
	 *
	 * @param array $tabs Product data tabs.
	 * since 1.0.0
	 */
	public static function product_data_tab( $tabs ) {
		$tabs['wc_serial_numbers'] = array(
			'label'    => __( 'Serial Numbers', 'wc-serial-numbers' ),
			'target'   => 'wc_serial_numbers_data',
			'class'    => array( 'show_if_simple' ),
			'priority' => 11,
		);

		return $tabs;
	}

	/**
	 * Render product data panel.
	 *
	 * @return void
	 */
	public static function product_data_panel() {
		global $post, $woocommerce;
		$delivery_quantity = (int) get_post_meta( $post->ID, '_delivery_quantity', true );
		?>
		<div id="wc_serial_numbers_data" class="panel woocommerce_options_panel show_if_simple" style="display: none;">
			<?php
			echo '<div class="options_group">';
			woocommerce_wp_checkbox(
				array(
					'id'          => '_is_serial_number',
					'label'       => __( 'Sell serial keys', 'wc-serial-numbers' ),
					'description' => __( 'Sell serial keys for this product.', 'wc-serial-numbers' ),
					'value'       => get_post_meta( $post->ID, '_is_serial_number', true ),
				)
			);
			woocommerce_wp_text_input(
				array(
					'id'                => '_delivery_quantity',
					'label'             => __( 'Delivery quantity', 'wc-serial-numbers' ),
					'description'       => __( 'Define the number of keys to be delivered to the customer.', 'wc-serial-numbers' ),
					'value'             => empty( $delivery_quantity ) ? 1 : $delivery_quantity,
					'type'              => 'number',
					'wrapper_class'     => 'options_group',
					'desc_tip'          => false,
					'custom_attributes' => array(
						'disabled' => 'disabled',
					),
				)
			);

			echo '</div><div class="options_group">';

			// radio input for serial key source.
			echo sprintf(
				'<p class="form-field _serial_key_source_field"><label for="_serial_key_source">%s</label><input type="radio" name="_serial_key_source" id="_serial_key_source" value="manual" %s> <span class="description">%s</span></p>',
				esc_html__( 'Sell from stock', 'wc-serial-numbers' ),
				checked( get_post_meta( $post->ID, '_serial_key_source', true ), 'manual', true ),
				esc_html__( 'Sell serial keys from the available stock.', 'wc-serial-numbers' )
			);

			echo sprintf(
				'<p class="form-field"><label>%s</label><span class="description">%d %s</span></p>',
				__( 'Stock', 'wc-serial-numbers' ),
				Key::count(
					array(
						'product_id' => $post->ID,
						'status'     => 'available'
					)
				),
				__( 'Serial key(s) in stock and available for sale.', 'wc-serial-numbers' )
			);

			echo '</div>';

			echo '<div class="options_group">';
			echo sprintf(
				'<p class="form-field _serial_key_source_field"><label for="_serial_key_source">%s</label><input type="radio" name="_serial_key_source" id="_serial_key_source" value="manual" %s> <span class="description">%s</span></p>',
				__( 'Sell using generator', 'wc-serial-numbers' ),
				checked( get_post_meta( $post->ID, '_serial_key_source', true ), 'manual', true ),
				__( 'Generate keys on the fly when an order is placed using the generator.', 'wc-serial-numbers' )
			);

			echo sprintf(
				'<p class="form-field"><label>%s</label><span class="description">%d %s</span></p>',
				__( 'Stock', 'wc-serial-numbers' ),
				Key::count(
					array(
						'product_id' => $post->ID,
						'status'     => 'available'
					)
				),
				__( 'Serial key(s) in stock and available for sale.', 'wc-serial-numbers' )
			);

			echo '</div>';

			echo '<div class="options_group">';

			echo sprintf(
				'<p class="form-field _serial_key_source_field"><label for="_serial_key_source">%s</label><input type="radio" name="_serial_key_source" id="_serial_key_source" value="manual" %s> <span class="description">%s</span></p>',
				__( 'Sell autogenerated keys', 'wc-serial-numbers' ),
				checked( get_post_meta( $post->ID, '_serial_key_source', true ), 'manual', true ),
				__( 'Generate keys automatically from a pattern when an order is placed.', 'wc-serial-numbers' )
			);

			echo sprintf(
				'<p class="form-field"><label>%s</label><span class="description">%d %s</span></p>',
				__( 'Stock', 'wc-serial-numbers' ),
				Key::count(
					array(
						'product_id' => $post->ID,
						'status'     => 'available'
					)
				),
				__( 'Serial key(s) in stock and available for sale.', 'wc-serial-numbers' )
			);

			echo '</div>';

			echo '<div class="options_group">';

			echo '</div>';

			/**
			 * Product data panel.
			 *
			 * @param int $post Post object.
			 *
			 * @since 1.0.0
			 */
			do_action( 'wc_serial_numbers_product_data_panel', $post );
			?>
		</div>
		<?php
	}

	/**
	 * Add a lock icon next to product title if the product is locked.
	 *
	 * @param string $title Product title.
	 * @param int    $id    Product ID.
	 *
	 * @return string
	 */
	public static function post_states( $post_states, $post ) {
		$post_states['wc_serial_numbers'] = '<span class="dashicons dashicons-lock" style="height: 16px;width: 16px;font-size: 14px;vertical-align: middle;"></span>';

		return $post_states;
	}


	/**
	 * Print style
	 *
	 * @since 1.0.0
	 */
	public static function print_style() {
		ob_start();
		?>
		<style>
			#woocommerce-product-data ul.wc-tabs li.wc_serial_numbers_options a:before {
				font-family: 'dashicons';
				content: "\f112";
			}

			._serial_key_source_field label {
				margin: 0 !important;
				width: 100% !important;
			}

			.wc-serial-numbers-upgrade-box {
				background: #f1f1f1;
				padding: 10px;
				border-left: 2px solid #007cba;
			}

			.wc-serial-numbers-variation-settings .wc-serial-numbers-settings-title {
				border-bottom: 1px solid #eee;
				padding-left: 0 !important;
				font-weight: 600;
				font-size: 1em;
				padding-bottom: 5px;
			}

			.wc-serial-numbers-variation-settings label, .wc-serial-numbers-variation-settings legend {
				margin-bottom: 5px !important;
				display: inline-block;
			}

			.wc-serial-numbers-variation-settings .wc-radios li {
				padding-bottom: 0 !important;

			}

			.wc-serial-numbers-variation-settings .woocommerce-help-tip {
				margin-top: -5px;
			}

			.wc-serial-numbers-variation-settings .short {
				min-width: 200px;
			}
		</style>
		<?php
		$style = ob_get_contents();
		ob_get_clean();
		echo $style;
	}

}
